.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.2.
.TH JSON_MODBUS "1" "March 2016" "json_modbus 1.0.1" "User Commands"
.SH NAME
json_modbus \- JSON Modbus
.SH SYNOPSIS
.B json_modbus
[\fI\,OPTIONS\/\fR]... [\fI\,HOSTNAME\/\fR]...
.SH DESCRIPTION
json_modbus 1.0.1
.PP
v1.0.0_ecowatch\-2\-g8b789cbd7d\-dirty
.RS
Registers of the modbus device can be passed as options or defined in a configuration file and read in using the -C commandline option

The register string as the following format for reading:
<reg_type> <reg_name> <reg_address>

The register string as the following format for writing:
<reg_type> <reg_name> <reg_address> <reg_value> [conversion]

The conversion parameter is optional

Register types can be one of the following:
.IP \[bu] 2
uint8
.IP \[bu]
uint16
.IP \[bu]
uint32
.IP \[bu]
int8
.IP \[bu]
int16
.IP \[bu]
int32
.IP \[bu]
float
.IP \[bu]
float_cdba
.IP \[bu]
float_array
.RE
.IP \[bu]
coil
.RE
.IP \[bu]
coils (write only!)
.RE

The coils type enables you to write multiple coils at once so it has a slightly differen syntax:

coils <coils_name> <coil_1_val> <coil_2_val> <coil_n_val>
.PP
This application reads a device using the modbus protocol and returns the
result in json format.
.TP
\fB\-h\fR, \fB\-\-help\fR
Print help and exit
.TP
\fB\-V\fR, \fB\-\-version\fR
Print version and exit
.TP
\fB\-p\fR, \fB\-\-port\fR=\fI\,INT\/\fR
Port of modbus device.  (default=`502')
.TP
\fB\-i\fR, \fB\-\-interval\fR=\fI\,INT\/\fR
Time between measurements in seconds  (default=`0')
.TP
\fB\-d\fR, \fB\-\-debug\fR
Show protocol debug information  (default=off)
.TP
\fB\-n\fR, \fB\-\-name\fR=\fI\,STRING\/\fR
Name of the application  (default=`modbus')
.TP
\fB\-D\-include\_date\fR
add a date to the output  (default=off)
.TP
\fB\-C\fR, \fB\-\-conf\-file\fR=\fI\,STRING\/\fR
Configuration file
.TP
\fB\-g\fR, \fB\-\-reg\fR=\fI\,STRING\/\fR
Define a register to read or write
.RS
Registers of the modbus device can be passed as options or defined in a configuration file and read in using the -C commandline option

The register string as the following format for reading:
<reg_type> <reg_name> <reg_address>

The register string as the following format for writing:
<reg_type> <reg_name> <reg_address> <reg_value> [conversion]

The conversion parameter is optional

Register types can be one of the following:
.IP \[bu] 2
uint8
.IP \[bu]
uint16
.IP \[bu]
uint32
.IP \[bu]
int8
.IP \[bu]
int16
.IP \[bu]
int32
.IP \[bu]
float
.IP \[bu]
float_cdba
.IP \[bu]
float_array
.RE
.IP \[bu]
coil
.RE
.IP \[bu]
coils (write only!)
.RE

The coils type enables you to write multiple coils at once so it has a slightly differen syntax:

coils <coils_name> <coil_1_val> <coil_2_val> <coil_n_val>
.TP
\fB\-t\fR, \fB\-\-timeout\fR=\fI\,INT\/\fR
Set the response timeout  (default=`1')
.TP
\fB\-s\fR, \fB\-\-serial\fR
Use serial rtu  (default=off)
.TP
\fB\-b\fR, \fB\-\-baud\fR=\fI\,INT\/\fR
Serial baudrate  (default=`115200')
.TP
\fB\-I\fR, \fB\-\-input\fR
Read from input registers not holding  (default=off)
.TP
\fB\-S\fR, \fB\-\-swap\fR
Swap two 16 bits in (u)int32  (default=off)
.TP
\fB\-\-delay\fR=\fI\,INT\/\fR
Delay before starting to send  (default=`0')
.IP
Mode: read
.TP
\fB\-r\fR, \fB\-\-read\fR
Read registers  (default=on)
.IP
Mode: write
.TP
\fB\-w\fR, \fB\-\-write\fR
Write registers  (default=off)
.PP
v1.0.0_ecowatch\-2\-g8b789cbd7d\-dirty
.RS
Registers of the modbus device can be passed as options or defined in a configuration file and read in using the -C commandline option

The register string as the following format for reading:
<reg_type> <reg_name> <reg_address>

The register string as the following format for writing:
<reg_type> <reg_name> <reg_address> <reg_value> [conversion]

The conversion parameter is optional

Register types can be one of the following:
.IP \[bu] 2
uint8
.IP \[bu]
uint16
.IP \[bu]
uint32
.IP \[bu]
int8
.IP \[bu]
int16
.IP \[bu]
int32
.IP \[bu]
float
.IP \[bu]
float_cdba
.IP \[bu]
float_array
.RE
.IP \[bu]
coil
.RE
.IP \[bu]
coils (write only!)
.RE

The coils type enables you to write multiple coils at once so it has a slightly differen syntax:

coils <coils_name> <coil_1_val> <coil_2_val> <coil_n_val>
.SH EXAMPLES
# Read coil on address 1 and give the response label coil_name

json_modbus -g 'coil coil_name 1' -r -h example.com -p 1502

outputs:
.br
{
.br
	"modbus": {
.br
		"coil_name": 0
.br
	}
.br
}

# Writing a uint32 register
json_modbus -g 'uint reg_name 10 1000000' -w -h example.com -p 1502
.SH "SEE ALSO"
The full documentation for
.B json_modbus
is maintained as a Texinfo manual.  If the
.B info
and
.B json_modbus
programs are properly installed at your site, the command
.IP
.B info json_modbus
.PP
should give you access to the complete manual.
